
-- Creating Database of Tiny-Sales-Shop

CREATE DATABASE Tiny_sales_shop;
USE Tiny_sales_shop;

-- Table Structure of Customers 
CREATE TABLE customers (
    customer_id integer PRIMARY KEY,
    first_name varchar(100),
    last_name varchar(100),
    email varchar(100)
);

-- Table Structure of Products 

CREATE TABLE products (
    product_id integer PRIMARY KEY,
    product_name varchar(100),
    price decimal
);

-- Table Structure of Orders 

CREATE TABLE orders (
    order_id integer PRIMARY KEY,
    customer_id integer,
    order_date date
);


-- Table Structure of order items 

CREATE TABLE order_items (
    order_id INTEGER,
    product_id INTEGER,
    quantity INTEGER
);

-- Dumping Values in the tables 

INSERT INTO customers (customer_id, first_name, last_name, email) VALUES
(1, 'John', 'Doe', 'johndoe@email.com'),
(2, 'Jane', 'Smith', 'janesmith@email.com'),
(3, 'Bob', 'Johnson', 'bobjohnson@email.com'),
(4, 'Alice', 'Brown', 'alicebrown@email.com'),
(5, 'Charlie', 'Davis', 'charliedavis@email.com'),
(6, 'Eva', 'Fisher', 'evafisher@email.com'),
(7, 'George', 'Harris', 'georgeharris@email.com'),
(8, 'Ivy', 'Jones', 'ivyjones@email.com'),
(9, 'Kevin', 'Miller', 'kevinmiller@email.com'),
(10, 'Lily', 'Nelson', 'lilynelson@email.com'),
(11, 'Oliver', 'Patterson', 'oliverpatterson@email.com'),
(12, 'Quinn', 'Roberts', 'quinnroberts@email.com'),
(13, 'Sophia', 'Thomas', 'sophiathomas@email.com');

INSERT INTO products (product_id, product_name, price) VALUES
(1, 'Product A', 10.00),
(2, 'Product B', 15.00),
(3, 'Product C', 20.00),
(4, 'Product D', 25.00),
(5, 'Product E', 30.00),
(6, 'Product F', 35.00),
(7, 'Product G', 40.00),
(8, 'Product H', 45.00),
(9, 'Product I', 50.00),
(10, 'Product J', 55.00),
(11, 'Product K', 60.00),
(12, 'Product L', 65.00),
(13, 'Product M', 70.00);

INSERT INTO orders (order_id, customer_id, order_date) VALUES
(1, 1, '2023-05-01'),
(2, 2, '2023-05-02'),
(3, 3, '2023-05-03'),
(4, 1, '2023-05-04'),
(5, 2, '2023-05-05'),
(6, 3, '2023-05-06'),
(7, 4, '2023-05-07'),
(8, 5, '2023-05-08'),
(9, 6, '2023-05-09'),
(10, 7, '2023-05-10'),
(11, 8, '2023-05-11'),
(12, 9, '2023-05-12'),
(13, 10, '2023-05-13'),
(14, 11, '2023-05-14'),
(15, 12, '2023-05-15'),
(16, 13, '2023-05-16');

INSERT INTO order_items (order_id, product_id, quantity) VALUES
(1, 1, 2),
(1, 2, 1),
(2, 2, 1),
(2, 3, 3),
(3, 1, 1),
(3, 3, 2),
(4, 2, 4),
(4, 3, 1),
(5, 1, 1),
(5, 3, 2),
(6, 2, 3),
(6, 1, 1),
(7, 4, 1),
(7, 5, 2),
(8, 6, 3),
(8, 7, 1),
(9, 8, 2),
(9, 9, 1),
(10, 10, 3),
(10, 11, 2),
(11, 12, 1),
(11, 13, 3),
(12, 4, 2),
(12, 5, 1),
(13, 6, 3),
(13, 7, 2),
(14, 8, 1),
(14, 9, 2),
(15, 10, 3),
(15, 11, 1),
(16, 12, 2),
(16, 13, 3);


-- Overview of the Tables 

-- Customer_Table
SELECT * FROM customers;

-- Order_Items Table
SELECT * FROM order_items;

-- Orders Table 
SELECT * FROM orders;

-- Products Table
SELECT * FROM products;

-- Which product has the highest price? Only return a single row.

SELECT PRODUCT_NAME, MAX(PRICE) AS MAX_PRICE FROM PRODUCTS
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

-- Which customer has made the most orders?

SELECT A.CUSTOMER_ID, CONCAT(FIRST_NAME,' ',LAST_NAME) AS FULL_NAME, COUNT(B.ORDER_ID) AS NO_OF_ORDER FROM CUSTOMERS A
INNER JOIN ORDERS B ON A.CUSTOMER_ID=B.CUSTOMER_ID 
GROUP BY 1,2
HAVING NO_OF_ORDER>1;

--What’s the total revenue per product?

SELECT A.PRODUCT_ID,PRODUCT_NAME,PRICE,SUM(QUANTITY),SUM(PRICE*QUANTITY) AS TOTAL_REVENUE FROM ORDER_ITEMS A
INNER JOIN PRODUCTS B ON A.PRODUCT_ID=B.PRODUCT_ID
GROUP BY 1,2,3
ORDER BY 5 DESC;

-- Find the day with the highest revenue.

SELECT DISTINCT ORDER_DATE,SUM(PRICE*QUANTITY) AS HIGHEST_REVENUE FROM 
ORDER_ITEMS B INNER JOIN PRODUCTS C ON B.PRODUCT_ID=C.PRODUCT_ID
INNER JOIN ORDERS A  ON A.ORDER_ID=B.ORDER_ID
GROUP BY 1
ORDER BY 2 DESC
LIMIT 3;


--Find the first order (by date) for each customer.

SELECT A.CUSTOMER_ID,CONCAT(FIRST_NAME,' ',LAST_NAME) AS FULL_NAME,MIN(ORDER_DATE) AS FIRST_ORD_DATE FROM CUSTOMERS A
INNER JOIN  ORDERS B ON A.CUSTOMER_ID=B.CUSTOMER_ID 
GROUP BY 1,2
ORDER BY 2;


--Find the top 3 customers who have ordered the most distinct products

SELECT  A.CUSTOMER_ID,CONCAT(FIRST_NAME,' ',LAST_NAME) AS FULL_NAME,COUNT(DISTINCT C.PRODUCT_ID) AS DISTINCT_PRODUCT
FROM CUSTOMERS A INNER JOIN ORDERS B ON A.CUSTOMER_ID=B.CUSTOMER_ID
INNER JOIN ORDER_ITEMS C ON C.ORDER_ID=B.ORDER_ID
GROUP BY 1,2
ORDER BY 3 DESC
LIMIT 3;


--Which product has been bought the least in terms of quantity?
SELECT A.PRODUCT_ID,PRODUCT_NAME,SUM(QUANTITY) AS COUNT_QTY FROM ORDER_ITEMS A
INNER JOIN PRODUCTS B ON A.PRODUCT_ID=B.PRODUCT_ID
GROUP BY 1,2
ORDER BY 3
LIMIT 4;

SELECT 
    product_id, SUM(quantity) AS product_quantity
FROM
    order_items
GROUP BY product_id
ORDER BY 2
LIMIT 4;


-- What is the median order total?

WITH order_total AS 
	( 
		SELECT 
			o.order_id,
            SUM(oi.quantity * p.price) AS Total_Revenue
        FROM 
			order_items oi
        JOIN 	
			products p ON p.product_id = oi.product_id
        JOIN 
			orders o ON o.order_id = oi.order_id
        GROUP BY 
			o.order_id)
      SELECT 
		AVG(Total_Revenue) AS Median_Total_Revenue
      FROM  (
			SELECT 
				Total_Revenue,
                NTILE(2) OVER (ORDER BY Total_Revenue) AS Quartile 
             FROM 
				order_total
            ) median_query 
       WHERE 
			Quartile = 1 OR Quartile = 2;



--For each order, determine if it was ‘Expensive’ (total over 300), ‘Affordable’ (total over 100), or ‘Cheap’.

SELECT * FROM ORDERS;

SELECT * FROM PRODUCTS;

SELECT PRODUCT_NAME,CASE WHEN TOTAL_REVENUE>300 THEN 'EXPENSIVE'
                         WHEN TOTAL_REVENUE>100  THEN 'AFFORDABE'
                        ELSE 'CHEAP'
                        END AS CATEGORY_SALE ,TOTAL_REVENUE FROM
(SELECT PRODUCT_NAME,SUM(QUANTITY*PRICE) AS TOTAL_REVENUE FROM ORDER_ITEMS A JOIN PRODUCTS B ON A.PRODUCT_ID=B.PRODUCT_ID
GROUP BY 1)D
ORDER BY TOTAL_REVENUE DESC;


-- Find customers who have ordered the product with the highest price.


SELECT * FROM CUSTOMERS;

SELECT * FROM ORDER_ITEMS;

SELECT * FROM PRODUCTS;

SELECT * FROM  ORDERS;

WITH CTE AS(
SELECT CONCAT(FIRST_NAME,' ',LAST_NAME) AS FULL_NAME, PRODUCT_NAME,PRICE,SUM(PRICE*QUANTITY) AS TOTAL_REVENUE,
DENSE_RANK() OVER(ORDER BY PRICE DESC) AS RNK FROM CUSTOMERS A 
INNER JOIN ORDERS B ON A.CUSTOMER_ID=B.CUSTOMER_ID
INNER JOIN ORDER_ITEMS C ON C.ORDER_ID=B.ORDER_ID
INNER JOIN PRODUCTS D ON D.PRODUCT_ID=C.PRODUCT_ID
GROUP BY 1,2,3
ORDER BY 3 DESC)

SELECT* FROM CTE
WHERE RNK=1;














