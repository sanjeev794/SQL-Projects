DROP DATABASE RETAIL;
CREATE DATABASE RETAIL;
USE RETAIL;

CREATE TABLE demographic_RAW
(AGE_DESC	CHAR(20),
MARITAL_STATUS_CODE	CHAR(5),
INCOME_DESC	VARCHAR(40),
HOMEOWNER_DESC	VARCHAR(40),
HH_COMP_DESC	VARCHAR(50),
HOUSEHOLD_SIZE_DESC	VARCHAR(50),
KID_CATEGORY_DESC	VARCHAR(40),
household_key INT PRIMARY KEY
);


CREATE  TABLE CAMPAIGN_DESC_RAW
(DESCRIPTION CHAR(10) ,	
CAMPAIGN	INT ,
START_DAY	INT,
END_DAY INT,
PRIMARY KEY (DESCRIPTION,CAMPAIGN)
);

CREATE INDEX IN01 ON campaign_desc_raw(DESCRIPTION);
CREATE INDEX IN02 ON campaign_desc_raw(CAMPAIGN);

CREATE  TABLE CAMPAIGN_RAW
(DESCRIPTION	CHAR(10) ,
household_key	INT,
CAMPAIGN INT,
FOREIGN KEY (DESCRIPTION,CAMPAIGN) references CAMPAIGN_DESC_RAW(DESCRIPTION,CAMPAIGN) ,
FOREIGN KEY (household_key) references demographic_RAW(household_key)
);

CREATE  TABLE PRODUCT_RAW
(PRODUCT_ID	INT PRIMARY KEY,
MANUFACTURER 	INT,
DEPARTMENT	VARCHAR(50),
BRAND	VARCHAR(30),
COMMODITY_DESC	VARCHAR(65),
SUB_COMMODITY_DESC VARCHAR(65)	,
CURR_SIZE_OF_PRODUCT VARCHAR(15)
);


CREATE  TABLE COUPON_RAW
(COUPON_UPC	INT,
PRODUCT_ID	INT,
CAMPAIGN INT
--FOREIGN KEY (PRODUCT_ID) references PRODUCT_RAW(PRODUCT_ID),
--FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN)
);


CREATE  TABLE COUPON_REDEMPT_RAW
(household_key	INT,
DAY	INT,
COUPON_UPC	INT,
CAMPAIGN INT
--FOREIGN KEY (household_key) references demographic_RAW(household_key),
--FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN)
);

CREATE  TABLE TRANSACTION_RAW 
(household_key	INT,
BASKET_ID	INT,
DAY	INT,
PRODUCT_ID	INT,
QUANTITY	INT,
SALES_VALUE	FLOAT,
STORE_ID	INT,
RETAIL_DISC	FLOAT,
TRANS_TIME	INT,
WEEK_NO	INT,
COUPON_DISC	INT,
COUPON_MATCH_DISC INT,
FOREIGN KEY (PRODUCT_ID) references PRODUCT_RAW(PRODUCT_ID),
FOREIGN KEY (household_key) references demographic_RAW(household_key)
);



SELECT* FROM demographic_RAW;
SELECT* FROM CAMPAIGN_DESC_RAW;
SELECT* FROM  CAMPAIGN_RAW;
SELECT* FROM PRODUCT_RAW;
SELECT* FROM COUPON_RAW;
SELECT* FROM COUPON_REDEMPT_RAW;
SELECT* FROM TRANSACTION_RAW;

SELECT* FROM RETAIL.PUBLIC.CAMPAIGN_DESC_NEW;
SELECT* FROM RETAIL.PUBLIC.COUPON_REDEMPT_NEW;
SELECT* FROM RETAIL.PUBLIC.TRANSACTION_NEW;


/*Campaign KPIs:
1 Number of campaigns: Count the total number of campaigns in the Campaign
table.
2 Campaign duration: Calculate the duration of each campaign by subtracting the
start day from the end day (in the Campaign_desc table).
3 Campaign effectiveness: Analyze the number of households associated with each
campaign (in the Campaign table) to measure campaign reach.*/

SELECT COUNT(DISTINCT CAMPAIGN) AS TOTAL_CAMPAIGN FROM RETAIL.PUBLIC.CAMPAIGN_DESC_NEW;

SELECT COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLD,CAMPAIGN FROM CAMPAIGN_RAW
GROUP BY 2;


CREATE OR REPLACE TABLE CAMPAIGN_KPI AS 
SELECT A.CAMPAIGN,A.CAMPAIGN_DURATION,START_DATE,END_DATE,A.DESCRIPTION,START_YEAR,END_YEAR,
COUNT( B.CAMPAIGN) AS TOTAL_CAMPAIGN,ROUND(COUNT(DISTINCT HOUSEHOLD_KEY)/2500*100,2) AS PER_DIS_CAMPAIGN
FROM RETAIL.PUBLIC.CAMPAIGN_DESC_NEW A LEFT JOIN CAMPAIGN_RAW B ON A.CAMPAIGN=B.CAMPAIGN
GROUP BY 1,2,3,4,5,6,7;

SELECT* FROM CAMPAIGN_KPI;

/*Coupon KPIs:
o Coupon redemption rate: Calculate the percentage of coupons redeemed (from the
coupon_redempt table) compared to the total number of coupons distributed (from
the Coupon table).
o Coupon usage by campaign: Measure the number of coupon redemptions (from
the coupon_redempt table) for each campaign (in the Coupon table).*/

SELECT CAMPAIGN,COUNT(DISTINCT COUPON_UPC) AS TOTAL_DISTRIBUTED_COUPON FROM COUPON_RAW
GROUP BY 1;

SELECT COUNT( DISTINCT COUPON_UPC) AS REDEM_COUPON FROM RETAIL.PUBLIC.COUPON_REDEMPT_NEW;

CREATE OR REPLACE TABLE COUPON_KPI AS 
SELECT CAMPAIGN,REDEM_COUPON,ROUND(REDEM_COUPON/TOTAL_DISTRIBUTED_COUPON*100,2)  PER_REDMM  FROM 
(SELECT  A.CAMPAIGN,COUNT(DISTINCT A.COUPON_UPC) AS TOTAL_DISTRIBUTED_COUPON,COUNT( DISTINCT B.COUPON_UPC) AS REDEM_COUPON 
FROM COUPON_RAW A LEFT JOIN RETAIL.PUBLIC.COUPON_REDEMPT_NEW B ON A.CAMPAIGN=B.CAMPAIGN
GROUP BY 1
);

SELECT * FROM COUPON_KPI;

/*Product KPIs:
o Sales value: Calculate the total sales value for each product (in the
Transaction_data table) to identify top-selling products.
o Manufacturer distribution: Analyze the distribution of products across different
manufacturers (in the Product table).
o Department-wise sales: Measure the sales value by department (in the Product
table) to understand which departments contribute most to revenue.
o Brand-wise sales: Calculate the sales value for each brand (in the Product table) to
identify top-selling brands.*/

SELECT* FROM RETAIL.PUBLIC.TRANSACTION_NEW;
SELECT* FROM PRODUCT_RAW;

SELECT DISTINCT PRODUCT_ID AS DISTINCT_PRODUCT,SUM(SALES_VALUE)AS TOTAL_SALES FROM RETAIL.PUBLIC.TRANSACTION_NEW
GROUP BY 1
ORDER BY 2 DESC ;

SELECT MANUFACTURER,COUNT(*) AS PRODUCT_COUNT FROM PRODUCT_RAW
GROUP BY 1;

SELECT DEPARTMENT,SUM(SALES_VALUE) AS TOTAL_SALES FROM RETAIL.PUBLIC.TRANSACTION_NEW A INNER JOIN 
PRODUCT_RAW B ON A.PRODUCT_ID=B.PRODUCT_ID
GROUP BY 1
ORDER BY 2 DESC;

SELECT BRAND ,SUM(SALES_VALUE) AS TOTAL_SALES FROM RETAIL.PUBLIC.TRANSACTION_NEW A
INNER JOIN PRODUCT_RAW B ON A.PRODUCT_ID=B.PRODUCT_ID
GROUP BY 1
ORDER BY 2 DESC;

CREATE OR REPLACE TABLE PRODUCT_KPI AS 
SELECT A.PRODUCT_ID,DEPARTMENT,BRAND,MANUFACTURER,SUM(SALES_VALUE)AS TOTAL_SALES,COUNT(B.PRODUCT_ID) AS PRODUCT_COUNT FROM RETAIL.PUBLIC.TRANSACTION_NEW A LEFT JOIN PRODUCT_RAW B ON A.PRODUCT_ID=B.PRODUCT_ID
GROUP BY 1,2,3,4
ORDER BY 5 DESC;

SELECT *FROM PRODUCT_KPI;

/*Transaction KPIs:
o Total sales value: Calculate the sum of sales values (in the Transaction_data table)
to measure overall revenue.
o Average transaction value: Calculate the average sales value per transaction to
understand customer spending patterns.
o Quantity sold: Measure the total quantity sold (in the Transaction_data table) to
understand product demand.
o Discounts: Analyze the amount and impact of discounts (RETAIL_DISC,
COUPON_DISC, COUPON_MATCH_DISC) on sales value.*/

SELECT* FROM RETAIL.PUBLIC.TRANSACTION_NEW;
SELECT (QUANTITY*SALES_VALUE) AS TOTAL_REVENUE, SUM(SALES_VALUE) AS TOTAL_SALES FROM RETAIL.PUBLIC.TRANSACTION_NEW
GROUP BY 1;

SELECT PRODUCT_ID,AVG(SALES_VALUE) AS AVG_SALE_PER_TRNX FROM RETAIL.PUBLIC.TRANSACTION_NEW
GROUP BY 1;

SELECT PRODUCT_ID,SUM(QUANTITY)AS TOTAL_QTY FROM RETAIL.PUBLIC.TRANSACTION_NEW
GROUP BY 1;

SELECT 
    SUM(RETAIL_DISC) AS total_retail_discount,
    SUM(COUPON_DISC) AS total_coupon_discount,
    SUM(COUPON_MATCH_DISC) AS total_coupon_match_discount,
    SUM(RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) AS total_discount_amount,
    SUM(sales_value) AS total_sales_value,
    (SUM(RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) / SUM(sales_value)) * 100 AS discount_impact_percentage
FROM
    RETAIL.PUBLIC.TRANSACTION_NEW
    ;

    
CREATE OR REPLACE TABLE TRANSACTION_KPI AS 
SELECT PRODUCT_ID,DATE,(QUANTITY*SALES_VALUE) AS TOTAL_REVENUE,SUM(SALES_VALUE) AS TOTAL_SALES ,AVG(SALES_VALUE) AS AVG_SALE_PER_TRNX ,SUM(QUANTITY)AS TOTAL_QTY,SUM(COUPON_DISC) AS total_coupon_discount, 
SUM(COUPON_MATCH_DISC) AS total_coupon_match_discount,SUM(RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) AS total_discount_amount FROM RETAIL.PUBLIC.TRANSACTION_NEW
GROUP BY 1,2,3;

SELECT * FROM TRANSACTION_KPI;
