CREATE DATABASE BANK;

USE BANK;


CREATE OR REPLACE TABLE District(
District_Code INT PRIMARY KEY	,
District_Name VARCHAR(100)	,
Region VARCHAR(100)	,
No_of_inhabitants	INT,
No_of_municipalities_with_inhabitants_less_499 INT,
No_of_municipalities_with_inhabitants_500_btw_1999	INT,
No_of_municipalities_with_inhabitants_2000_btw_9999	INT,
No_of_municipalities_with_inhabitants_less_10000 INT,	
No_of_cities	INT,
Ratio_of_urban_inhabitants	FLOAT,
Average_salary	INT,
No_of_entrepreneurs_per_1000_inhabitants INT,
No_committed_crime_2017	INT,
No_committed_crime_2018 INT
) ;



CREATE OR REPLACE TABLE Account(
account_id INT PRIMARY KEY,
district_id	INT,
frequency	VARCHAR(40),
Date DATE ,
Account_Type VARCHAR(100) ,
Card_Assigned VARCHAR(20),
FOREIGN KEY (district_id) references DISTRICT(District_Code) 
);

CREATE OR REPLACE TABLE Order_list (
order_id	INT PRIMARY KEY,
account_id	INT,
bank_to	VARCHAR(45),
account_to	INT,
amount FLOAT,
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);



CREATE OR REPLACE TABLE Loan(
loan_id	INT ,
account_id	INT,
Date	DATE,
amount	INT,
duration	INT,
payments	INT,
status VARCHAR(35),
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);



CREATE OR REPLACE TABLE Trnx(
trans_id INT,	
account_id	INT,
Date	DATE,
Type	VARCHAR(30),
operation	VARCHAR(40),
amount	INT,
balance	FLOAT,
Purpose	VARCHAR(40),
bank	VARCHAR(45),
account_partner_id INT,
FOREIGN KEY (account_id) references ACCOUNT(account_id));


CREATE OR REPLACE TABLE Client(
client_id	INT PRIMARY KEY,
Sex	CHAR(10),
Birth_date	DATE,
district_id INT,
FOREIGN KEY (district_id) references DISTRICT(District_Code) 
);


CREATE OR REPLACE TABLE disp(
disp_id	INT PRIMARY KEY,
client_id INT,
account_id	INT,
type CHAR(15),
FOREIGN KEY (account_id) references ACCOUNT(account_id),
FOREIGN KEY (client_id) references CLIENT(client_id)
);


CREATE OR REPLACE TABLE Card(
card_id	INT PRIMARY KEY,
disp_id	INT,
type CHAR(10)	,
issued DATE,
FOREIGN KEY (disp_id) references disp(disp_id)
);

----------------------xxxxxxxxxxxxx--------------------xxxxxxxxxxxxxxxxxxx-----------------xxxxxxxx

CREATE OR REPLACE STORAGE integration s3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN ='arn:aws:iam::233625266009:role/BANKROLE'
STORAGE_ALLOWED_LOCATIONS =('s3://czvakiyabank/');

DESC integration s3_int;


CREATE OR REPLACE STAGE BANK
URL ='s3://czvakiyabank'
--credentials=(aws_key_id='AKIAXQKR3H3PSG72XFMK'aws_secret_key='eKL6a6FjlQHic4s8Ne712Aelzg2ou4j6tNsVvFq5')
file_format = BANK_TESTING
storage_integration = s3_int;

LIST @BANK;

SHOW STAGES;

SHOW PIPES;


CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISTRICT AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."DISTRICT" --yourdatabase -- your schema ---your table
FROM '@BANK/District/' --s3 bucket subfolde4r name
FILE_FORMAT = BANK_TESTING;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_ACCOUNT AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."ACCOUNT"
FROM '@BANK/Account/'
FILE_FORMAT = BANK_TESTING;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_TXNS AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."TRNX"
FROM '@BANK/Trnx/'
FILE_FORMAT = BANK_TESTING;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISP AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."DISP"
FROM '@BANK/disp/'
FILE_FORMAT = BANK_TESTING;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CARD AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."CARD"
FROM '@BANK/Card/'
FILE_FORMAT = BANK_TESTING;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_ORDER_LIST AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."ORDER_LIST"
FROM '@BANK/Order/'
FILE_FORMAT = BANK_TESTING;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_LOAN AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."LOAN"
FROM '@BANK/Loan/'
FILE_FORMAT = BANK_TESTING;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CLIENT AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."CLIENT"
FROM '@BANK/Client/'
FILE_FORMAT = BANK_TESTING;


SELECT SYSTEM$PIPE_STATUS('BANK_SNOWPIPE_DISTRICT');
SELECT SYSTEM$PIPE_STATUS('BANK_SNOWPIPE_ORDER_LIST');

----Testing purpose wheather the data is uploaded or not flowing in pipe
ALTER PIPE BANK_SNOWPIPE_CLIENT REFRESH;

ALTER PIPE BANK_SNOWPIPE_LOAN REFRESH;

ALTER PIPE BANK_SNOWPIPE_ORDER_LIST REFRESH;

ALTER PIPE  BANK_SNOWPIPE_CARD  REFRESH;

ALTER PIPE  BANK_SNOWPIPE_DISP REFRESH;

ALTER PIPE BANK_SNOWPIPE_ACCOUNT REFRESH;

ALTER PIPE BANK_SNOWPIPE_DISTRICT REFRESH;

ALTER PIPE BANK_SNOWPIPE_CLIENT REFRESH;

ALTER PIPE BANK_SNOWPIPE_TXNS REFRESH;

select COUNT(*)from DISTRICT;
select COUNT(*)from ACCOUNT;
select COUNT(*)from CLIENT;
select COUNT(*)from ORDER_LIST;
select COUNT(*)from LOAN;
select COUNT(*)from DISP;
select COUNT(*)from TRNX;
select COUNT(*)from CARD;




SELECT*FROM TRNX;

---CREATE OR REPLACE PROCEDURE CREAT_OR_REPLACE_ACC_LATEST()
RETURNS STRING
LANGUAGE SQL
AS;

  CREATE OR REPLACE TABLE ACC_LATEST_TXNS_WITH_BALANCE 
AS(
SELECT LTD.*,TXN.BALANCE
FROM TRNX AS TXN
INNER JOIN 
(
   SELECT ACCOUNT_ID,YEAR(DATE) AS TXN_YEAR,
   MONTH(DATE) AS TXN_MONTH,
   MAX(DATE) AS LATEST_TXN_DATE
   FROM TRNX
   GROUP BY 1,2,3
   ORDER BY 1,2,3

) AS LTD ON TXN.ACCOUNT_ID = LTD.ACCOUNT_ID AND TXN.DATE = LTD.LATEST_TXN_DATE
WHERE TXN.TYPE = 'Credit' -- this is the assumptions am having : month end txn data is credit
ORDER BY TXN.ACCOUNT_ID,LTD.TXN_YEAR,LTD.TXN_MONTH);


SELECT*FROM ACC_LATEST_TXNS_WITH_BALANCE;

--------------BANKING KPI-------XXXXXXXXXXX-------------XXXXX
CREATE OR REPLACE TABLE BANKING_KPI AS(
SELECT  ALWB.TXN_YEAR , ALWB.TXN_MONTH,T.BANK,A.ACCOUNT_TYPE,

COUNT(DISTINCT ALWB.ACCOUNT_ID) AS TOT_ACCOUNT, 
COUNT(DISTINCT T.TRANS_ID) AS TOT_TXNS,
COUNT(CASE WHEN T.TYPE = 'Credit' THEN 1 END) AS DEPOSIT_COUNT ,
COUNT(CASE WHEN T.TYPE = 'Withdrawal' THEN 1 END) AS WITHDRAWAL_COUNT,

SUM(ALWB.BALANCE) AS TOT_BALANCE,

ROUND((DEPOSIT_COUNT / TOT_TXNS) * 100,2)  AS DEPOSIT_PERC ,
ROUND((WITHDRAWAL_COUNT / TOT_TXNS) * 100,2) AS WITHDRAWAL_PERC ,
NVL(TOT_BALANCE / TOT_ACCOUNT,0) AS AVG_BALANCE,

ROUND(TOT_TXNS/TOT_ACCOUNT,0) AS TPA

FROM TRNX AS T
INNER JOIN  ACC_LATEST_TXNS_WITH_BALANCE AS ALWB ON T.ACCOUNT_ID = ALWB.ACCOUNT_ID
LEFT OUTER JOIN  ACCOUNT AS A ON T.ACCOUNT_ID = A.ACCOUNT_ID
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4);

SELECT* FROM BANKING_KPI;



-----------------------STORED PROCEDURE---------------------

CREATE OR REPLACE PROCEDURE CREAT_OR_REPLACE_ACC_LATEST()
RETURNS STRING
LANGUAGE SQL
AS
$$

  CREATE OR REPLACE TABLE ACC_LATEST_TXNS_WITH_BALANCE 
AS(
SELECT LTD.*,TXN.BALANCE
FROM TRNX AS TXN
INNER JOIN 
(
   SELECT ACCOUNT_ID,YEAR(DATE) AS TXN_YEAR,
   MONTH(DATE) AS TXN_MONTH,
   MAX(DATE) AS LATEST_TXN_DATE
   FROM TRNX
   GROUP BY 1,2,3
   ORDER BY 1,2,3

) AS LTD ON TXN.ACCOUNT_ID = LTD.ACCOUNT_ID AND TXN.DATE = LTD.LATEST_TXN_DATE
WHERE TXN.TYPE = 'Credit' -- this is the assumptions am having : month end txn data is credit
ORDER BY TXN.ACCOUNT_ID,LTD.TXN_YEAR,LTD.TXN_MONTH);
  $$;
  

  CREATE OR REPLACE PROCEDURE CREATE_OR_REPLACE_BANKINGKPI()
RETURNS STRING
LANGUAGE SQL
AS
$$

CREATE OR REPLACE TABLE BANKING_KPI AS(
SELECT  ALWB.TXN_YEAR , ALWB.TXN_MONTH,T.BANK,A.ACCOUNT_TYPE,

COUNT(DISTINCT ALWB.ACCOUNT_ID) AS TOT_ACCOUNT, 
COUNT(DISTINCT T.TRANS_ID) AS TOT_TXNS,
COUNT(CASE WHEN T.TYPE = 'Credit' THEN 1 END) AS DEPOSIT_COUNT ,
COUNT(CASE WHEN T.TYPE = 'Withdrawal' THEN 1 END) AS WITHDRAWAL_COUNT,

SUM(ALWB.BALANCE) AS TOT_BALANCE,

ROUND((DEPOSIT_COUNT / TOT_TXNS) * 100,2)  AS DEPOSIT_PERC ,
ROUND((WITHDRAWAL_COUNT / TOT_TXNS) * 100,2) AS WITHDRAWAL_PERC ,
NVL(TOT_BALANCE / TOT_ACCOUNT,0) AS AVG_BALANCE,

ROUND(TOT_TXNS/TOT_ACCOUNT,0) AS TPA

FROM TRNX AS T
INNER JOIN  ACC_LATEST_TXNS_WITH_BALANCE AS ALWB ON T.ACCOUNT_ID = ALWB.ACCOUNT_ID
LEFT OUTER JOIN  ACCOUNT AS A ON T.ACCOUNT_ID = A.ACCOUNT_ID
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4);
 $$;

 SELECT * FROM TRNX; 
 DROP TABLE BANKING_KPI;
 DROP TABLE ACC_LATEST_TXNS_WITH_BALANCE;
  
SELECT*FROM BANKING_KPI;
SELECT*FROM ACC_LATEST_TXNS_WITH_BALANCE;
  
CREATE OR REPLACE TASK  ACC_LATEST_TXNS_WITH_BALANCE
WAREHOUSE = COMPUTE_WH
SCHEDULE =  '2 MINUTE'
AS CALL CREAT_OR_REPLACE_ACC_LATEST();
  
CREATE OR REPLACE TASK  BANKING_KPI
WAREHOUSE = COMPUTE_WH
SCHEDULE =  '5 MINUTE'
AS CALL CREATE_OR_REPLACE_BANKINGKPI();  
  
SHOW TASKS;  
  
ALTER TASK ACC_LATEST_TXNS_WITH_BALANCE  RESUME;
ALTER TASK ACC_LATEST_TXNS_WITH_BALANCE SUSPEND;  
ALTER TASK  BANKING_KPI RESUME;
ALTER TASK BANKING_KPI SUSPEND;  
  
  
SELECT*FROM BANKING_KPI;
SELECT*FROM ACC_LATEST_TXNS_WITH_BALANCE;
  



SELECT*FROM TRNX;

CREATE OR REPLACE PROCEDURE CREAT_OR_REPLACE_ACC_LATEST()
RETURNS STRING
LANGUAGE SQL
AS

  CREATE OR REPLACE TABLE ACC_LATEST_TXNS_WITH_BALANCE 
AS(
SELECT LTD.*,TXN.BALANCE
FROM TRANSACTIONS AS TXN
INNER JOIN 
(
   SELECT ACCOUNT_ID,YEAR(DATE) AS TXN_YEAR,
   MONTH(DATE) AS TXN_MONTH,
   MAX(DATE) AS LATEST_TXN_DATE
   FROM TRANSACTIONS
   GROUP BY 1,2,3
   ORDER BY 1,2,3

) AS LTD ON TXN.ACCOUNT_ID = LTD.ACCOUNT_ID AND TXN.DATE = LTD.LATEST_TXN_DATE
WHERE TXN.TYPE = 'Credit' -- this is the assumptions am having : month end txn data is credit
ORDER BY TXN.ACCOUNT_ID,LTD.TXN_YEAR,LTD.TXN_MONTH);
